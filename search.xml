<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Redis数据结构之简单动态字符串</title>
      <link href="/2018/06/05/Redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E7%AE%80%E5%8D%95%E5%8A%A8%E6%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2018/06/05/Redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E7%AE%80%E5%8D%95%E5%8A%A8%E6%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      <content type="html"><![CDATA[<h3 id="Redis数据结构之简单动态字符串"><a href="#Redis数据结构之简单动态字符串" class="headerlink" title="Redis数据结构之简单动态字符串"></a>Redis数据结构之简单动态字符串</h3><p>Redis中，并没有直接使用C语言传统的字符串表示（以空字符结尾的字符数组），而是自己构建了一种简单动态字符串SDS。</p><p>使用SDS作为Redis默认的字符串表示，而C语言的传统字符串只会在字符串字面值的表示时出现，因为字面值不会被修改。</p><p>SDS在Redis的作用主要有以下几点：</p><blockquote><ul><li>作为Redis中用于保存数据库中的字符串值</li><li>用于AOF模块（持久化日志）中的AOF缓冲区</li><li>客户端状态的输入缓冲区</li></ul></blockquote><h3 id="SDS结构的定义"><a href="#SDS结构的定义" class="headerlink" title="SDS结构的定义"></a>SDS结构的定义</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sdshdr</span> &#123;</span></span><br><span class="line">    <span class="comment">// len记录buf数组中已经使用的字节的数量，也即是sds中保存的字符串的长度</span></span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="comment">// free记录buf数组中，剩余没有使用的字节的数量</span></span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">free</span>;</span><br><span class="line">    <span class="comment">// 字节数组，用于保存字符串数据</span></span><br><span class="line">    <span class="keyword">char</span> buf[];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>SDS中保存的字符串遵循C语言中字符串以’\0’结尾的惯例，但保存’\0’的字节空间并不计算在len属性内。</p><p>因此，对于SDS，实际上可以重用C的库函数中的字符串部分。</p><h3 id="SDS结构的优点"><a href="#SDS结构的优点" class="headerlink" title="SDS结构的优点"></a>SDS结构的优点</h3><h4 id="获取字符串长度时间复杂度为常数"><a href="#获取字符串长度时间复杂度为常数" class="headerlink" title="获取字符串长度时间复杂度为常数"></a>获取字符串长度时间复杂度为常数</h4><p>很显然，由于len属性，直接记录了保存的字符串的长度（不包括’\0’字符），因此可以以O(1)的时间复杂度获取到SDS字符串的长度。</p><p>获取SDS字符串长度不会成为服务器的性能瓶颈。</p><h4 id="避免缓冲区溢出"><a href="#避免缓冲区溢出" class="headerlink" title="避免缓冲区溢出"></a>避免缓冲区溢出</h4><p>传统C语言，实际上没有封装字符串这一类型，仅仅是利用字符数组保存字符串，并且约定字符串的最后一个字符为空字符’\0’。</p><p>由于不记录字符串长度，而导致很多隐患，比如内存的访问越界，缓冲区溢出。而Redis的SDS结构中，直接记录了字符串的长度，在进行相关的SDS字符串操作时，Redis字符串API可以很好的利用保存的长度来避免缓冲区的溢出。</p><p>比如，需要在字符串之后进行append操作，那么可以先检查字符串的free是否有足够空间，如果不够则扩展原来的SDS字符串，然后进行append操作，从而避免了溢出。</p><h4 id="减少修改字符串时带来的内存重分配次数"><a href="#减少修改字符串时带来的内存重分配次数" class="headerlink" title="减少修改字符串时带来的内存重分配次数"></a>减少修改字符串时带来的内存重分配次数</h4><p>传统的C字符串进行append或者trim操作时，可能要对字符串占用的字符数组空间进行扩展或者释放，因此不可避免的陷入malloc和free的系统调用过程中，系统调用需要进行CPU状态的切换（用户态到内核态），涉及底层的中断等，存在较大的开销，如果append或者trim操作比较频繁，显然，会导致性能瓶颈，为此，SDS字符串采用空间换取时间的一种策略来避免过多的系统调用</p><h5 id="空间预分配"><a href="#空间预分配" class="headerlink" title="空间预分配"></a>空间预分配</h5><ul><li><p>如果修改SDS后，SDS的长度（len的值）小于1MB，则程序分配len大小的未使用空间，即free的值也为len，用于记录未使用空间。</p><p>SDS实际占内存 2 * len + 1 个字节</p></li><li><p>如果修改SDS后，其长度大于1MB，则分配固定的1MB未使用空间，SDS实际占据内存 len + 1MB + 1字节</p></li></ul><p>利用空间预分配机制，减少陷入系统调用的次数，采取了内存换时间的策略。</p><h5 id="惰性空间释放"><a href="#惰性空间释放" class="headerlink" title="惰性空间释放"></a>惰性空间释放</h5><p>惰性空间释放，用于优化SDS字符串的缩短操作。</p><p>当进行SDS字符串的缩短操作时，并不立刻释放节省出来的内存，而是把这部分内存添加到free记录中，以备后用。</p><p>当真正需要释放SDS字符串占据的内存时，再去调用相应的API。</p><h4 id="二进制安全"><a href="#二进制安全" class="headerlink" title="二进制安全"></a>二进制安全</h4><p>传统的C字符串，由于格式约定（尾部必须为空字符’\0’），同时，存在放数组中的必须是ASCII字符，因此具有局限性，只能保存文本数据，对于图片，音频，视频等二进制数据则不能保存。</p><p>而SDS由于存在len这一属性，可以用来保存二进制数据，同时，SDS的API是二进制安全的，API仅仅以处理二进制数据的方式来处理缓存在buf数组中的数据，同时存在len这一长度限制，数据在写入时是什么样，被读取时也是什么样，buf也成为字节数组（而不是字符数组）。</p><h4 id="兼容部分C字符串函数"><a href="#兼容部分C字符串函数" class="headerlink" title="兼容部分C字符串函数"></a>兼容部分C字符串函数</h4><p>这一点在之前的介绍讲过，由于SDS保存字符串时，遵循以空字符结尾的规则，因此可以重用部分C的字符串函数，比如printf仍然可以用于显示SDS字符串内容，但是，有的函数并不安全，不如strcat。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><table><thead><tr><th style="text-align:left">C字符串</th><th style="text-align:left">SDS字符串</th></tr></thead><tbody><tr><td style="text-align:left">获取长度的时间复杂度为O(n)</td><td style="text-align:left">获取长度的时间复杂度为O(1)</td></tr><tr><td style="text-align:left">API不安全，可能导致缓冲区溢出</td><td style="text-align:left">API时安全的，不会造成缓冲区溢出</td></tr><tr><td style="text-align:left">每次涉及长度的修改，都需要进行系统调用进行内存的配置</td><td style="text-align:left">通过预分配机制，减少系统调用次数，减少了开销</td></tr><tr><td style="text-align:left">只能保存文本数据</td><td style="text-align:left">可以保存除了文本之外的二进制数据</td></tr></tbody></table><h3 id="SDS的相关API"><a href="#SDS的相关API" class="headerlink" title="SDS的相关API"></a>SDS的相关API</h3><p><a href="https://github.com/antirez/redis/blob/unstable/src/sds.h">SDS的API头文件</a></p>]]></content>
      
      <categories>
          
          <category> Redis设计与实现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis源码学习 </tag>
            
            <tag> 简单动态字符串 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/06/04/hello-world/"/>
      <url>/2018/06/04/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
    </entry>
    
  
  
</search>
